# 설정파일 우선순위
# 1. application.yml
# 2. [임의의 애플리케이션 이름].yml
# 3. [임의의 애플리케이션 이름]-[임의의 profile 이름].yml
server:
  port: 8000

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka

spring:
  application:
    name: ecom-api-gateway-service
  cloud:
    gateway:
      routes:
#        - id: user-service
#          uri: lb://USER-SERVICE # 유레카에 등록된 이름을 기재
#          predicates:
#            - Path=/user-service/** # 해당 URI가 포함되면 user-service로 포워딩
        ##### 로그인
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/login
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie
            # 기존의 @RequestMapping("/user-service") 을 @RequestMapping("/") 로 쓰기위한 설정
            # /user-service/** 로 들어오는 URL은 /**로 받는다. (URL액세스는 그대로 /user-service/** )
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
        ##### 회원가입
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/users
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
        ##### 기타 GET 메소드로 조회하는 것들 => 권한체크 필요
        ####  기재 순서대로 적용되므로 이 설정을 user-service의 맨 밑에 둠
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/**
            - Method=GET
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
            - AuthorizationHeaderFilter
        #### user-service actuator
        # /user-service/actuator/refresh를 호출하면 서버의 설정정보가 재구성된다.
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/actuator/**
            - Method=GET, POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
        - id: catalog-service
          uri: lb://CATALOG-SERVICE
          predicates:
            - Path=/catalog-service/**
        - id: order-service
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/order-service/**
        - id: ecom-first-service
          uri: lb://ECOM-FIRST-SERVICE
          predicates:
            # http://localhost:8081/ecom-first-service/**
            - Path=/ecom-first-service/**
          filters:
#            - AddRequestHeader=[Key], [Value]
#            - AddRequestHeader=first-request, first-request-header2
#            - AddResponseHeader=first-response, first-response-header2
            - CustomFilter
        - id: ecom-second-service
          uri: lb://ECOM-SECOND-SERVICE
          predicates:
            # http://localhost:8081/ecom-second-service/**
            - Path=/ecom-second-service/**
          filters:
#            - AddRequestHeader=[Key], [Value]
#            - AddRequestHeader=second-request, second-request-header2
#            - AddResponseHeader=second-response, second-response-header2
            - name: CustomFilter
            - name: LoggingFilter
              args:
                baseMessage: Hi, Logging Filter
                preLogger: true
                postLogger: true
      # Test : http://localhost:8000/ecom-second-service/check
      default-filters:
        - name: GlobalFilter
          args:
            baseMessage: Spring Cloud Gateway Global Filter
            preLogger: true
            postLogger: true

#token:
#  secret: user_token

management:
  endpoints:
    web:
      exposure:
        include: refresh, health, beans, httptrace